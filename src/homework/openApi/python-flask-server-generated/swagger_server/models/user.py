# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, email: str=None, pass_hash: int=None, robot_sn_hash: int=None):  # noqa: E501
        """User - a model defined in Swagger

        :param id: The id of this User.  # noqa: E501
        :type id: int
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param pass_hash: The pass_hash of this User.  # noqa: E501
        :type pass_hash: int
        :param robot_sn_hash: The robot_sn_hash of this User.  # noqa: E501
        :type robot_sn_hash: int
        """
        self.swagger_types = {
            'id': int,
            'email': str,
            'pass_hash': int,
            'robot_sn_hash': int
        }

        self.attribute_map = {
            'id': 'id',
            'email': 'email',
            'pass_hash': 'passHash',
            'robot_sn_hash': 'robotSNHash'
        }
        self._id = id
        self._email = email
        self._pass_hash = pass_hash
        self._robot_sn_hash = robot_sn_hash

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: int
        """

        self._id = id

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def pass_hash(self) -> int:
        """Gets the pass_hash of this User.


        :return: The pass_hash of this User.
        :rtype: int
        """
        return self._pass_hash

    @pass_hash.setter
    def pass_hash(self, pass_hash: int):
        """Sets the pass_hash of this User.


        :param pass_hash: The pass_hash of this User.
        :type pass_hash: int
        """
        if pass_hash is None:
            raise ValueError("Invalid value for `pass_hash`, must not be `None`")  # noqa: E501

        self._pass_hash = pass_hash

    @property
    def robot_sn_hash(self) -> int:
        """Gets the robot_sn_hash of this User.


        :return: The robot_sn_hash of this User.
        :rtype: int
        """
        return self._robot_sn_hash

    @robot_sn_hash.setter
    def robot_sn_hash(self, robot_sn_hash: int):
        """Sets the robot_sn_hash of this User.


        :param robot_sn_hash: The robot_sn_hash of this User.
        :type robot_sn_hash: int
        """
        if robot_sn_hash is None:
            raise ValueError("Invalid value for `robot_sn_hash`, must not be `None`")  # noqa: E501

        self._robot_sn_hash = robot_sn_hash
