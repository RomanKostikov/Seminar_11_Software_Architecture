# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Robot(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, model: str=None, version: str=None, charge: int=None, garbage_container: int=None, robot_pollution: int=None, next_service: int=None, serial_number: str=None, ip_address: int=None, group_id: int=None):  # noqa: E501
        """Robot - a model defined in Swagger

        :param id: The id of this Robot.  # noqa: E501
        :type id: int
        :param model: The model of this Robot.  # noqa: E501
        :type model: str
        :param version: The version of this Robot.  # noqa: E501
        :type version: str
        :param charge: The charge of this Robot.  # noqa: E501
        :type charge: int
        :param garbage_container: The garbage_container of this Robot.  # noqa: E501
        :type garbage_container: int
        :param robot_pollution: The robot_pollution of this Robot.  # noqa: E501
        :type robot_pollution: int
        :param next_service: The next_service of this Robot.  # noqa: E501
        :type next_service: int
        :param serial_number: The serial_number of this Robot.  # noqa: E501
        :type serial_number: str
        :param ip_address: The ip_address of this Robot.  # noqa: E501
        :type ip_address: int
        :param group_id: The group_id of this Robot.  # noqa: E501
        :type group_id: int
        """
        self.swagger_types = {
            'id': int,
            'model': str,
            'version': str,
            'charge': int,
            'garbage_container': int,
            'robot_pollution': int,
            'next_service': int,
            'serial_number': str,
            'ip_address': int,
            'group_id': int
        }

        self.attribute_map = {
            'id': 'id',
            'model': 'model',
            'version': 'version',
            'charge': 'charge',
            'garbage_container': 'garbageContainer',
            'robot_pollution': 'robotPollution',
            'next_service': 'nextService',
            'serial_number': 'serialNumber',
            'ip_address': 'ipAddress',
            'group_id': 'groupId'
        }
        self._id = id
        self._model = model
        self._version = version
        self._charge = charge
        self._garbage_container = garbage_container
        self._robot_pollution = robot_pollution
        self._next_service = next_service
        self._serial_number = serial_number
        self._ip_address = ip_address
        self._group_id = group_id

    @classmethod
    def from_dict(cls, dikt) -> 'Robot':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Robot of this Robot.  # noqa: E501
        :rtype: Robot
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Robot.


        :return: The id of this Robot.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Robot.


        :param id: The id of this Robot.
        :type id: int
        """

        self._id = id

    @property
    def model(self) -> str:
        """Gets the model of this Robot.


        :return: The model of this Robot.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this Robot.


        :param model: The model of this Robot.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def version(self) -> str:
        """Gets the version of this Robot.


        :return: The version of this Robot.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this Robot.


        :param version: The version of this Robot.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def charge(self) -> int:
        """Gets the charge of this Robot.


        :return: The charge of this Robot.
        :rtype: int
        """
        return self._charge

    @charge.setter
    def charge(self, charge: int):
        """Sets the charge of this Robot.


        :param charge: The charge of this Robot.
        :type charge: int
        """
        if charge is None:
            raise ValueError("Invalid value for `charge`, must not be `None`")  # noqa: E501

        self._charge = charge

    @property
    def garbage_container(self) -> int:
        """Gets the garbage_container of this Robot.


        :return: The garbage_container of this Robot.
        :rtype: int
        """
        return self._garbage_container

    @garbage_container.setter
    def garbage_container(self, garbage_container: int):
        """Sets the garbage_container of this Robot.


        :param garbage_container: The garbage_container of this Robot.
        :type garbage_container: int
        """
        if garbage_container is None:
            raise ValueError("Invalid value for `garbage_container`, must not be `None`")  # noqa: E501

        self._garbage_container = garbage_container

    @property
    def robot_pollution(self) -> int:
        """Gets the robot_pollution of this Robot.


        :return: The robot_pollution of this Robot.
        :rtype: int
        """
        return self._robot_pollution

    @robot_pollution.setter
    def robot_pollution(self, robot_pollution: int):
        """Sets the robot_pollution of this Robot.


        :param robot_pollution: The robot_pollution of this Robot.
        :type robot_pollution: int
        """
        if robot_pollution is None:
            raise ValueError("Invalid value for `robot_pollution`, must not be `None`")  # noqa: E501

        self._robot_pollution = robot_pollution

    @property
    def next_service(self) -> int:
        """Gets the next_service of this Robot.


        :return: The next_service of this Robot.
        :rtype: int
        """
        return self._next_service

    @next_service.setter
    def next_service(self, next_service: int):
        """Sets the next_service of this Robot.


        :param next_service: The next_service of this Robot.
        :type next_service: int
        """
        if next_service is None:
            raise ValueError("Invalid value for `next_service`, must not be `None`")  # noqa: E501

        self._next_service = next_service

    @property
    def serial_number(self) -> str:
        """Gets the serial_number of this Robot.


        :return: The serial_number of this Robot.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number: str):
        """Sets the serial_number of this Robot.


        :param serial_number: The serial_number of this Robot.
        :type serial_number: str
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def ip_address(self) -> int:
        """Gets the ip_address of this Robot.


        :return: The ip_address of this Robot.
        :rtype: int
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address: int):
        """Sets the ip_address of this Robot.


        :param ip_address: The ip_address of this Robot.
        :type ip_address: int
        """
        if ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501

        self._ip_address = ip_address

    @property
    def group_id(self) -> int:
        """Gets the group_id of this Robot.


        :return: The group_id of this Robot.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id: int):
        """Sets the group_id of this Robot.


        :param group_id: The group_id of this Robot.
        :type group_id: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")  # noqa: E501

        self._group_id = group_id
