# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Schedule(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, date_time: str=None, mode: int=None, robot_id: int=None):  # noqa: E501
        """Schedule - a model defined in Swagger

        :param id: The id of this Schedule.  # noqa: E501
        :type id: int
        :param date_time: The date_time of this Schedule.  # noqa: E501
        :type date_time: str
        :param mode: The mode of this Schedule.  # noqa: E501
        :type mode: int
        :param robot_id: The robot_id of this Schedule.  # noqa: E501
        :type robot_id: int
        """
        self.swagger_types = {
            'id': int,
            'date_time': str,
            'mode': int,
            'robot_id': int
        }

        self.attribute_map = {
            'id': 'id',
            'date_time': 'dateTime',
            'mode': 'mode',
            'robot_id': 'robotId'
        }
        self._id = id
        self._date_time = date_time
        self._mode = mode
        self._robot_id = robot_id

    @classmethod
    def from_dict(cls, dikt) -> 'Schedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Schedule of this Schedule.  # noqa: E501
        :rtype: Schedule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Schedule.


        :return: The id of this Schedule.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Schedule.


        :param id: The id of this Schedule.
        :type id: int
        """

        self._id = id

    @property
    def date_time(self) -> str:
        """Gets the date_time of this Schedule.


        :return: The date_time of this Schedule.
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time: str):
        """Sets the date_time of this Schedule.


        :param date_time: The date_time of this Schedule.
        :type date_time: str
        """
        if date_time is None:
            raise ValueError("Invalid value for `date_time`, must not be `None`")  # noqa: E501

        self._date_time = date_time

    @property
    def mode(self) -> int:
        """Gets the mode of this Schedule.


        :return: The mode of this Schedule.
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode: int):
        """Sets the mode of this Schedule.


        :param mode: The mode of this Schedule.
        :type mode: int
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501

        self._mode = mode

    @property
    def robot_id(self) -> int:
        """Gets the robot_id of this Schedule.


        :return: The robot_id of this Schedule.
        :rtype: int
        """
        return self._robot_id

    @robot_id.setter
    def robot_id(self, robot_id: int):
        """Sets the robot_id of this Schedule.


        :param robot_id: The robot_id of this Schedule.
        :type robot_id: int
        """
        if robot_id is None:
            raise ValueError("Invalid value for `robot_id`, must not be `None`")  # noqa: E501

        self._robot_id = robot_id
