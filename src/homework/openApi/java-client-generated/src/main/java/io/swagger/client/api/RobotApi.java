/*
 * Robot service 3.0
 * API сервис управления роботом - пылесосм.
 *
 * OpenAPI spec version: 1.0.11
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Robot;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RobotApi {
    private ApiClient apiClient;

    public RobotApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RobotApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addRobot
     * @param body Добавить робот-пылесос в базу данных (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addRobotCall(Robot body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/Robot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addRobotValidateBeforeCall(Robot body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addRobot(Async)");
        }
        
        com.squareup.okhttp.Call call = addRobotCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Добавление робота-пылесоса
     * Добавить робот-пылесос в базу данных
     * @param body Добавить робот-пылесос в базу данных (required)
     * @return Robot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Robot addRobot(Robot body) throws ApiException {
        ApiResponse<Robot> resp = addRobotWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Добавление робота-пылесоса
     * Добавить робот-пылесос в базу данных
     * @param body Добавить робот-пылесос в базу данных (required)
     * @return ApiResponse&lt;Robot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Robot> addRobotWithHttpInfo(Robot body) throws ApiException {
        com.squareup.okhttp.Call call = addRobotValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Добавление робота-пылесоса (asynchronously)
     * Добавить робот-пылесос в базу данных
     * @param body Добавить робот-пылесос в базу данных (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addRobotAsync(Robot body, final ApiCallback<Robot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addRobotValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addRobot
     * @param id  (required)
     * @param model  (required)
     * @param version  (required)
     * @param charge  (required)
     * @param garbageContainer  (required)
     * @param robotPollution  (required)
     * @param nextService  (required)
     * @param serialNumber  (required)
     * @param ipAddress  (required)
     * @param groupId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addRobotCall(Long id, String model, String version, Long charge, Long garbageContainer, Long robotPollution, Long nextService, String serialNumber, Long ipAddress, Long groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Robot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (id != null)
        localVarFormParams.put("id", id);
        if (model != null)
        localVarFormParams.put("model", model);
        if (version != null)
        localVarFormParams.put("version", version);
        if (charge != null)
        localVarFormParams.put("charge", charge);
        if (garbageContainer != null)
        localVarFormParams.put("garbageContainer", garbageContainer);
        if (robotPollution != null)
        localVarFormParams.put("robotPollution", robotPollution);
        if (nextService != null)
        localVarFormParams.put("nextService", nextService);
        if (serialNumber != null)
        localVarFormParams.put("serialNumber", serialNumber);
        if (ipAddress != null)
        localVarFormParams.put("ipAddress", ipAddress);
        if (groupId != null)
        localVarFormParams.put("groupId", groupId);

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addRobotValidateBeforeCall(Long id, String model, String version, Long charge, Long garbageContainer, Long robotPollution, Long nextService, String serialNumber, Long ipAddress, Long groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addRobot(Async)");
        }
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling addRobot(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling addRobot(Async)");
        }
        // verify the required parameter 'charge' is set
        if (charge == null) {
            throw new ApiException("Missing the required parameter 'charge' when calling addRobot(Async)");
        }
        // verify the required parameter 'garbageContainer' is set
        if (garbageContainer == null) {
            throw new ApiException("Missing the required parameter 'garbageContainer' when calling addRobot(Async)");
        }
        // verify the required parameter 'robotPollution' is set
        if (robotPollution == null) {
            throw new ApiException("Missing the required parameter 'robotPollution' when calling addRobot(Async)");
        }
        // verify the required parameter 'nextService' is set
        if (nextService == null) {
            throw new ApiException("Missing the required parameter 'nextService' when calling addRobot(Async)");
        }
        // verify the required parameter 'serialNumber' is set
        if (serialNumber == null) {
            throw new ApiException("Missing the required parameter 'serialNumber' when calling addRobot(Async)");
        }
        // verify the required parameter 'ipAddress' is set
        if (ipAddress == null) {
            throw new ApiException("Missing the required parameter 'ipAddress' when calling addRobot(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling addRobot(Async)");
        }
        
        com.squareup.okhttp.Call call = addRobotCall(id, model, version, charge, garbageContainer, robotPollution, nextService, serialNumber, ipAddress, groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Добавление робота-пылесоса
     * Добавить робот-пылесос в базу данных
     * @param id  (required)
     * @param model  (required)
     * @param version  (required)
     * @param charge  (required)
     * @param garbageContainer  (required)
     * @param robotPollution  (required)
     * @param nextService  (required)
     * @param serialNumber  (required)
     * @param ipAddress  (required)
     * @param groupId  (required)
     * @return Robot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Robot addRobot(Long id, String model, String version, Long charge, Long garbageContainer, Long robotPollution, Long nextService, String serialNumber, Long ipAddress, Long groupId) throws ApiException {
        ApiResponse<Robot> resp = addRobotWithHttpInfo(id, model, version, charge, garbageContainer, robotPollution, nextService, serialNumber, ipAddress, groupId);
        return resp.getData();
    }

    /**
     * Добавление робота-пылесоса
     * Добавить робот-пылесос в базу данных
     * @param id  (required)
     * @param model  (required)
     * @param version  (required)
     * @param charge  (required)
     * @param garbageContainer  (required)
     * @param robotPollution  (required)
     * @param nextService  (required)
     * @param serialNumber  (required)
     * @param ipAddress  (required)
     * @param groupId  (required)
     * @return ApiResponse&lt;Robot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Robot> addRobotWithHttpInfo(Long id, String model, String version, Long charge, Long garbageContainer, Long robotPollution, Long nextService, String serialNumber, Long ipAddress, Long groupId) throws ApiException {
        com.squareup.okhttp.Call call = addRobotValidateBeforeCall(id, model, version, charge, garbageContainer, robotPollution, nextService, serialNumber, ipAddress, groupId, null, null);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Добавление робота-пылесоса (asynchronously)
     * Добавить робот-пылесос в базу данных
     * @param id  (required)
     * @param model  (required)
     * @param version  (required)
     * @param charge  (required)
     * @param garbageContainer  (required)
     * @param robotPollution  (required)
     * @param nextService  (required)
     * @param serialNumber  (required)
     * @param ipAddress  (required)
     * @param groupId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addRobotAsync(Long id, String model, String version, Long charge, Long garbageContainer, Long robotPollution, Long nextService, String serialNumber, Long ipAddress, Long groupId, final ApiCallback<Robot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addRobotValidateBeforeCall(id, model, version, charge, garbageContainer, robotPollution, nextService, serialNumber, ipAddress, groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteRobot
     * @param robotId ID - идентификатор робота-пылесоса (required)
     * @param robotId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRobotCall(Long robotId, String robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Robot/deleteById/{robotId}"
            .replaceAll("\\{" + "robotId" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (robotId != null)
        localVarHeaderParams.put("robotId", apiClient.parameterToString(robotId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRobotValidateBeforeCall(Long robotId, String robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling deleteRobot(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteRobotCall(robotId, robotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Удаление робота-пылесоса по ID
     * Удаление робота-пылесоса из базы данных
     * @param robotId ID - идентификатор робота-пылесоса (required)
     * @param robotId  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRobot(Long robotId, String robotId) throws ApiException {
        deleteRobotWithHttpInfo(robotId, robotId);
    }

    /**
     * Удаление робота-пылесоса по ID
     * Удаление робота-пылесоса из базы данных
     * @param robotId ID - идентификатор робота-пылесоса (required)
     * @param robotId  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRobotWithHttpInfo(Long robotId, String robotId) throws ApiException {
        com.squareup.okhttp.Call call = deleteRobotValidateBeforeCall(robotId, robotId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Удаление робота-пылесоса по ID (asynchronously)
     * Удаление робота-пылесоса из базы данных
     * @param robotId ID - идентификатор робота-пылесоса (required)
     * @param robotId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRobotAsync(Long robotId, String robotId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRobotValidateBeforeCall(robotId, robotId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getRobotById
     * @param robotId roborID - идентификатор робота-пылесоса (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRobotByIdCall(Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Robot/robotById/{robotId}"
            .replaceAll("\\{" + "robotId" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRobotByIdValidateBeforeCall(Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling getRobotById(Async)");
        }
        
        com.squareup.okhttp.Call call = getRobotByIdCall(robotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Поиск робота-пылесоса по ID
     * Поиск робота-пылесоса в базе данных
     * @param robotId roborID - идентификатор робота-пылесоса (required)
     * @return Robot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Robot getRobotById(Long robotId) throws ApiException {
        ApiResponse<Robot> resp = getRobotByIdWithHttpInfo(robotId);
        return resp.getData();
    }

    /**
     * Поиск робота-пылесоса по ID
     * Поиск робота-пылесоса в базе данных
     * @param robotId roborID - идентификатор робота-пылесоса (required)
     * @return ApiResponse&lt;Robot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Robot> getRobotByIdWithHttpInfo(Long robotId) throws ApiException {
        com.squareup.okhttp.Call call = getRobotByIdValidateBeforeCall(robotId, null, null);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Поиск робота-пылесоса по ID (asynchronously)
     * Поиск робота-пылесоса в базе данных
     * @param robotId roborID - идентификатор робота-пылесоса (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRobotByIdAsync(Long robotId, final ApiCallback<Robot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRobotByIdValidateBeforeCall(robotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateRobot
     * @param body Обновление данных о роботе пылесосе в базе данных (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRobotCall(Robot body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/Robot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRobotValidateBeforeCall(Robot body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateRobot(Async)");
        }
        
        com.squareup.okhttp.Call call = updateRobotCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Обновление робота-пылесоса
     * Обновление данных о роботе пылесосе в базе данных
     * @param body Обновление данных о роботе пылесосе в базе данных (required)
     * @return Robot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Robot updateRobot(Robot body) throws ApiException {
        ApiResponse<Robot> resp = updateRobotWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Обновление робота-пылесоса
     * Обновление данных о роботе пылесосе в базе данных
     * @param body Обновление данных о роботе пылесосе в базе данных (required)
     * @return ApiResponse&lt;Robot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Robot> updateRobotWithHttpInfo(Robot body) throws ApiException {
        com.squareup.okhttp.Call call = updateRobotValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Обновление робота-пылесоса (asynchronously)
     * Обновление данных о роботе пылесосе в базе данных
     * @param body Обновление данных о роботе пылесосе в базе данных (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRobotAsync(Robot body, final ApiCallback<Robot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRobotValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateRobot
     * @param id  (required)
     * @param model  (required)
     * @param version  (required)
     * @param charge  (required)
     * @param garbageContainer  (required)
     * @param robotPollution  (required)
     * @param nextService  (required)
     * @param serialNumber  (required)
     * @param ipAddress  (required)
     * @param groupId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRobotCall(Long id, String model, String version, Long charge, Long garbageContainer, Long robotPollution, Long nextService, String serialNumber, Long ipAddress, Long groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/Robot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (id != null)
        localVarFormParams.put("id", id);
        if (model != null)
        localVarFormParams.put("model", model);
        if (version != null)
        localVarFormParams.put("version", version);
        if (charge != null)
        localVarFormParams.put("charge", charge);
        if (garbageContainer != null)
        localVarFormParams.put("garbageContainer", garbageContainer);
        if (robotPollution != null)
        localVarFormParams.put("robotPollution", robotPollution);
        if (nextService != null)
        localVarFormParams.put("nextService", nextService);
        if (serialNumber != null)
        localVarFormParams.put("serialNumber", serialNumber);
        if (ipAddress != null)
        localVarFormParams.put("ipAddress", ipAddress);
        if (groupId != null)
        localVarFormParams.put("groupId", groupId);

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRobotValidateBeforeCall(Long id, String model, String version, Long charge, Long garbageContainer, Long robotPollution, Long nextService, String serialNumber, Long ipAddress, Long groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateRobot(Async)");
        }
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling updateRobot(Async)");
        }
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling updateRobot(Async)");
        }
        // verify the required parameter 'charge' is set
        if (charge == null) {
            throw new ApiException("Missing the required parameter 'charge' when calling updateRobot(Async)");
        }
        // verify the required parameter 'garbageContainer' is set
        if (garbageContainer == null) {
            throw new ApiException("Missing the required parameter 'garbageContainer' when calling updateRobot(Async)");
        }
        // verify the required parameter 'robotPollution' is set
        if (robotPollution == null) {
            throw new ApiException("Missing the required parameter 'robotPollution' when calling updateRobot(Async)");
        }
        // verify the required parameter 'nextService' is set
        if (nextService == null) {
            throw new ApiException("Missing the required parameter 'nextService' when calling updateRobot(Async)");
        }
        // verify the required parameter 'serialNumber' is set
        if (serialNumber == null) {
            throw new ApiException("Missing the required parameter 'serialNumber' when calling updateRobot(Async)");
        }
        // verify the required parameter 'ipAddress' is set
        if (ipAddress == null) {
            throw new ApiException("Missing the required parameter 'ipAddress' when calling updateRobot(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateRobot(Async)");
        }
        
        com.squareup.okhttp.Call call = updateRobotCall(id, model, version, charge, garbageContainer, robotPollution, nextService, serialNumber, ipAddress, groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Обновление робота-пылесоса
     * Обновление данных о роботе пылесосе в базе данных
     * @param id  (required)
     * @param model  (required)
     * @param version  (required)
     * @param charge  (required)
     * @param garbageContainer  (required)
     * @param robotPollution  (required)
     * @param nextService  (required)
     * @param serialNumber  (required)
     * @param ipAddress  (required)
     * @param groupId  (required)
     * @return Robot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Robot updateRobot(Long id, String model, String version, Long charge, Long garbageContainer, Long robotPollution, Long nextService, String serialNumber, Long ipAddress, Long groupId) throws ApiException {
        ApiResponse<Robot> resp = updateRobotWithHttpInfo(id, model, version, charge, garbageContainer, robotPollution, nextService, serialNumber, ipAddress, groupId);
        return resp.getData();
    }

    /**
     * Обновление робота-пылесоса
     * Обновление данных о роботе пылесосе в базе данных
     * @param id  (required)
     * @param model  (required)
     * @param version  (required)
     * @param charge  (required)
     * @param garbageContainer  (required)
     * @param robotPollution  (required)
     * @param nextService  (required)
     * @param serialNumber  (required)
     * @param ipAddress  (required)
     * @param groupId  (required)
     * @return ApiResponse&lt;Robot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Robot> updateRobotWithHttpInfo(Long id, String model, String version, Long charge, Long garbageContainer, Long robotPollution, Long nextService, String serialNumber, Long ipAddress, Long groupId) throws ApiException {
        com.squareup.okhttp.Call call = updateRobotValidateBeforeCall(id, model, version, charge, garbageContainer, robotPollution, nextService, serialNumber, ipAddress, groupId, null, null);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Обновление робота-пылесоса (asynchronously)
     * Обновление данных о роботе пылесосе в базе данных
     * @param id  (required)
     * @param model  (required)
     * @param version  (required)
     * @param charge  (required)
     * @param garbageContainer  (required)
     * @param robotPollution  (required)
     * @param nextService  (required)
     * @param serialNumber  (required)
     * @param ipAddress  (required)
     * @param groupId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRobotAsync(Long id, String model, String version, Long charge, Long garbageContainer, Long robotPollution, Long nextService, String serialNumber, Long ipAddress, Long groupId, final ApiCallback<Robot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRobotValidateBeforeCall(id, model, version, charge, garbageContainer, robotPollution, nextService, serialNumber, ipAddress, groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
