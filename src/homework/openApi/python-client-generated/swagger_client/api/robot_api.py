# coding: utf-8

"""
    Robot service 3.0

    API сервис управления роботом - пылесосм.  # noqa: E501

    OpenAPI spec version: 1.0.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RobotApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_robot(self, body, **kwargs):  # noqa: E501
        """Добавление робота-пылесоса  # noqa: E501

        Добавить робот-пылесос в базу данных  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_robot(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Robot body: Добавить робот-пылесос в базу данных (required)
        :return: Robot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_robot_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_robot_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_robot_with_http_info(self, body, **kwargs):  # noqa: E501
        """Добавление робота-пылесоса  # noqa: E501

        Добавить робот-пылесос в базу данных  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_robot_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Robot body: Добавить робот-пылесос в базу данных (required)
        :return: Robot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_robot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_robot`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'version' in params:
            form_params.append(('version', params['version']))  # noqa: E501
        if 'charge' in params:
            form_params.append(('charge', params['charge']))  # noqa: E501
        if 'garbage_container' in params:
            form_params.append(('garbageContainer', params['garbage_container']))  # noqa: E501
        if 'robot_pollution' in params:
            form_params.append(('robotPollution', params['robot_pollution']))  # noqa: E501
        if 'next_service' in params:
            form_params.append(('nextService', params['next_service']))  # noqa: E501
        if 'serial_number' in params:
            form_params.append(('serialNumber', params['serial_number']))  # noqa: E501
        if 'ip_address' in params:
            form_params.append(('ipAddress', params['ip_address']))  # noqa: E501
        if 'group_id' in params:
            form_params.append(('groupId', params['group_id']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Robot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Robot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_robot(self, id, model, version, charge, garbage_container, robot_pollution, next_service, serial_number, ip_address, group_id, **kwargs):  # noqa: E501
        """Добавление робота-пылесоса  # noqa: E501

        Добавить робот-пылесос в базу данных  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_robot(id, model, version, charge, garbage_container, robot_pollution, next_service, serial_number, ip_address, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str model: (required)
        :param str version: (required)
        :param int charge: (required)
        :param int garbage_container: (required)
        :param int robot_pollution: (required)
        :param int next_service: (required)
        :param str serial_number: (required)
        :param int ip_address: (required)
        :param int group_id: (required)
        :return: Robot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_robot_with_http_info(id, model, version, charge, garbage_container, robot_pollution, next_service, serial_number, ip_address, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_robot_with_http_info(id, model, version, charge, garbage_container, robot_pollution, next_service, serial_number, ip_address, group_id, **kwargs)  # noqa: E501
            return data

    def add_robot_with_http_info(self, id, model, version, charge, garbage_container, robot_pollution, next_service, serial_number, ip_address, group_id, **kwargs):  # noqa: E501
        """Добавление робота-пылесоса  # noqa: E501

        Добавить робот-пылесос в базу данных  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_robot_with_http_info(id, model, version, charge, garbage_container, robot_pollution, next_service, serial_number, ip_address, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str model: (required)
        :param str version: (required)
        :param int charge: (required)
        :param int garbage_container: (required)
        :param int robot_pollution: (required)
        :param int next_service: (required)
        :param str serial_number: (required)
        :param int ip_address: (required)
        :param int group_id: (required)
        :return: Robot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'model', 'version', 'charge', 'garbage_container', 'robot_pollution', 'next_service', 'serial_number', 'ip_address', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_robot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `add_robot`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `add_robot`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `add_robot`")  # noqa: E501
        # verify the required parameter 'charge' is set
        if ('charge' not in params or
                params['charge'] is None):
            raise ValueError("Missing the required parameter `charge` when calling `add_robot`")  # noqa: E501
        # verify the required parameter 'garbage_container' is set
        if ('garbage_container' not in params or
                params['garbage_container'] is None):
            raise ValueError("Missing the required parameter `garbage_container` when calling `add_robot`")  # noqa: E501
        # verify the required parameter 'robot_pollution' is set
        if ('robot_pollution' not in params or
                params['robot_pollution'] is None):
            raise ValueError("Missing the required parameter `robot_pollution` when calling `add_robot`")  # noqa: E501
        # verify the required parameter 'next_service' is set
        if ('next_service' not in params or
                params['next_service'] is None):
            raise ValueError("Missing the required parameter `next_service` when calling `add_robot`")  # noqa: E501
        # verify the required parameter 'serial_number' is set
        if ('serial_number' not in params or
                params['serial_number'] is None):
            raise ValueError("Missing the required parameter `serial_number` when calling `add_robot`")  # noqa: E501
        # verify the required parameter 'ip_address' is set
        if ('ip_address' not in params or
                params['ip_address'] is None):
            raise ValueError("Missing the required parameter `ip_address` when calling `add_robot`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `add_robot`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'version' in params:
            form_params.append(('version', params['version']))  # noqa: E501
        if 'charge' in params:
            form_params.append(('charge', params['charge']))  # noqa: E501
        if 'garbage_container' in params:
            form_params.append(('garbageContainer', params['garbage_container']))  # noqa: E501
        if 'robot_pollution' in params:
            form_params.append(('robotPollution', params['robot_pollution']))  # noqa: E501
        if 'next_service' in params:
            form_params.append(('nextService', params['next_service']))  # noqa: E501
        if 'serial_number' in params:
            form_params.append(('serialNumber', params['serial_number']))  # noqa: E501
        if 'ip_address' in params:
            form_params.append(('ipAddress', params['ip_address']))  # noqa: E501
        if 'group_id' in params:
            form_params.append(('groupId', params['group_id']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Robot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Robot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_robot(self, robot_id, **kwargs):  # noqa: E501
        """Удаление робота-пылесоса по ID  # noqa: E501

        Удаление робота-пылесоса из базы данных  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_robot(robot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int robot_id: ID - идентификатор робота-пылесоса (required)
        :param str robot_id:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_robot_with_http_info(robot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_robot_with_http_info(robot_id, **kwargs)  # noqa: E501
            return data

    def delete_robot_with_http_info(self, robot_id, **kwargs):  # noqa: E501
        """Удаление робота-пылесоса по ID  # noqa: E501

        Удаление робота-пылесоса из базы данных  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_robot_with_http_info(robot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int robot_id: ID - идентификатор робота-пылесоса (required)
        :param str robot_id:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['robot_id', 'robot_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_robot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'robot_id' is set
        if ('robot_id' not in params or
                params['robot_id'] is None):
            raise ValueError("Missing the required parameter `robot_id` when calling `delete_robot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'robot_id' in params:
            path_params['robotId'] = params['robot_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'robot_id' in params:
            header_params['robotId'] = params['robot_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Robot/deleteById/{robotId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_robot_by_id(self, robot_id, **kwargs):  # noqa: E501
        """Поиск робота-пылесоса по ID  # noqa: E501

        Поиск робота-пылесоса в базе данных  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_robot_by_id(robot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int robot_id: roborID - идентификатор робота-пылесоса (required)
        :return: Robot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_robot_by_id_with_http_info(robot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_robot_by_id_with_http_info(robot_id, **kwargs)  # noqa: E501
            return data

    def get_robot_by_id_with_http_info(self, robot_id, **kwargs):  # noqa: E501
        """Поиск робота-пылесоса по ID  # noqa: E501

        Поиск робота-пылесоса в базе данных  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_robot_by_id_with_http_info(robot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int robot_id: roborID - идентификатор робота-пылесоса (required)
        :return: Robot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['robot_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_robot_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'robot_id' is set
        if ('robot_id' not in params or
                params['robot_id'] is None):
            raise ValueError("Missing the required parameter `robot_id` when calling `get_robot_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'robot_id' in params:
            path_params['robotId'] = params['robot_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Robot/robotById/{robotId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Robot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_robot(self, body, **kwargs):  # noqa: E501
        """Обновление робота-пылесоса  # noqa: E501

        Обновление данных о роботе пылесосе в базе данных  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_robot(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Robot body: Обновление данных о роботе пылесосе в базе данных (required)
        :return: Robot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_robot_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_robot_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_robot_with_http_info(self, body, **kwargs):  # noqa: E501
        """Обновление робота-пылесоса  # noqa: E501

        Обновление данных о роботе пылесосе в базе данных  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_robot_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Robot body: Обновление данных о роботе пылесосе в базе данных (required)
        :return: Robot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_robot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_robot`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'version' in params:
            form_params.append(('version', params['version']))  # noqa: E501
        if 'charge' in params:
            form_params.append(('charge', params['charge']))  # noqa: E501
        if 'garbage_container' in params:
            form_params.append(('garbageContainer', params['garbage_container']))  # noqa: E501
        if 'robot_pollution' in params:
            form_params.append(('robotPollution', params['robot_pollution']))  # noqa: E501
        if 'next_service' in params:
            form_params.append(('nextService', params['next_service']))  # noqa: E501
        if 'serial_number' in params:
            form_params.append(('serialNumber', params['serial_number']))  # noqa: E501
        if 'ip_address' in params:
            form_params.append(('ipAddress', params['ip_address']))  # noqa: E501
        if 'group_id' in params:
            form_params.append(('groupId', params['group_id']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Robot', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Robot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_robot(self, id, model, version, charge, garbage_container, robot_pollution, next_service, serial_number, ip_address, group_id, **kwargs):  # noqa: E501
        """Обновление робота-пылесоса  # noqa: E501

        Обновление данных о роботе пылесосе в базе данных  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_robot(id, model, version, charge, garbage_container, robot_pollution, next_service, serial_number, ip_address, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str model: (required)
        :param str version: (required)
        :param int charge: (required)
        :param int garbage_container: (required)
        :param int robot_pollution: (required)
        :param int next_service: (required)
        :param str serial_number: (required)
        :param int ip_address: (required)
        :param int group_id: (required)
        :return: Robot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_robot_with_http_info(id, model, version, charge, garbage_container, robot_pollution, next_service, serial_number, ip_address, group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_robot_with_http_info(id, model, version, charge, garbage_container, robot_pollution, next_service, serial_number, ip_address, group_id, **kwargs)  # noqa: E501
            return data

    def update_robot_with_http_info(self, id, model, version, charge, garbage_container, robot_pollution, next_service, serial_number, ip_address, group_id, **kwargs):  # noqa: E501
        """Обновление робота-пылесоса  # noqa: E501

        Обновление данных о роботе пылесосе в базе данных  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_robot_with_http_info(id, model, version, charge, garbage_container, robot_pollution, next_service, serial_number, ip_address, group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param str model: (required)
        :param str version: (required)
        :param int charge: (required)
        :param int garbage_container: (required)
        :param int robot_pollution: (required)
        :param int next_service: (required)
        :param str serial_number: (required)
        :param int ip_address: (required)
        :param int group_id: (required)
        :return: Robot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'model', 'version', 'charge', 'garbage_container', 'robot_pollution', 'next_service', 'serial_number', 'ip_address', 'group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_robot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_robot`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `update_robot`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `update_robot`")  # noqa: E501
        # verify the required parameter 'charge' is set
        if ('charge' not in params or
                params['charge'] is None):
            raise ValueError("Missing the required parameter `charge` when calling `update_robot`")  # noqa: E501
        # verify the required parameter 'garbage_container' is set
        if ('garbage_container' not in params or
                params['garbage_container'] is None):
            raise ValueError("Missing the required parameter `garbage_container` when calling `update_robot`")  # noqa: E501
        # verify the required parameter 'robot_pollution' is set
        if ('robot_pollution' not in params or
                params['robot_pollution'] is None):
            raise ValueError("Missing the required parameter `robot_pollution` when calling `update_robot`")  # noqa: E501
        # verify the required parameter 'next_service' is set
        if ('next_service' not in params or
                params['next_service'] is None):
            raise ValueError("Missing the required parameter `next_service` when calling `update_robot`")  # noqa: E501
        # verify the required parameter 'serial_number' is set
        if ('serial_number' not in params or
                params['serial_number'] is None):
            raise ValueError("Missing the required parameter `serial_number` when calling `update_robot`")  # noqa: E501
        # verify the required parameter 'ip_address' is set
        if ('ip_address' not in params or
                params['ip_address'] is None):
            raise ValueError("Missing the required parameter `ip_address` when calling `update_robot`")  # noqa: E501
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `update_robot`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'model' in params:
            form_params.append(('model', params['model']))  # noqa: E501
        if 'version' in params:
            form_params.append(('version', params['version']))  # noqa: E501
        if 'charge' in params:
            form_params.append(('charge', params['charge']))  # noqa: E501
        if 'garbage_container' in params:
            form_params.append(('garbageContainer', params['garbage_container']))  # noqa: E501
        if 'robot_pollution' in params:
            form_params.append(('robotPollution', params['robot_pollution']))  # noqa: E501
        if 'next_service' in params:
            form_params.append(('nextService', params['next_service']))  # noqa: E501
        if 'serial_number' in params:
            form_params.append(('serialNumber', params['serial_number']))  # noqa: E501
        if 'ip_address' in params:
            form_params.append(('ipAddress', params['ip_address']))  # noqa: E501
        if 'group_id' in params:
            form_params.append(('groupId', params['group_id']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Robot', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Robot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
